; TIMER FOR PAL-1 (SCAN BASED)
; 2 RESTARTS AT ZERO
; 4 EXITS TO KIM MONITOR
; 1 STARTS THE TIMER
; 3 PAUSES THE TIMER
; ASSEMBLED USING A65 ASSEMBLER
; TO COMPILE IN LINUX (AS PER MARK ABENE)
; ln -s a65.h A65.H
; gcc -I. -o a65 a65.c a65util.c a65eval.c
; THEN CREATE THE FOLLOWING FILE: ASM65 WITH CONTENTS
; (BE SURE dos2unix IS INSTALLED)
; -----------------------------------------------------
; #!/bin/bash
; ./a65 $1.asm -l $1.lst -o $1.hex 
; srec_cat $1.hex -intel -o $1.mos -MOS_Technologies
; unix2dos $1.mos
; -----------------------------------------------------
; THEN chmod +x ASM65 to make it executable
; THIS SCRIPT PUTS THE FILE INTO PAPER TAPE FORMAT
; IN THE KIM MONITOR, USE THE "L" COMMAND TO LOAD PAPER TAPE
; JUST PAST THE OUTPUT OF YOUR SCRIPT (*.mos) INTO TERMINAL.

; -- Ricky Bryce

SCANDS: EQU $1F1F
GETKEY: EQU $1F6A
EXIT:   EQU $1C64
DLYTIME:    EQU 01H


    ORG $0200   ; KIM-1 STARTS AT $0200

RESTART:
    CLD         ; BE SURE DECIMAL MODE IS CLEARED
    LDA #00     ; ZERO THE ACCUMULATOR
    LDX #00     ; ZERO THE X REGISTER
    LDY #00     ; ZERO THE Y REGISTER
    STA $F9     ; RIGHTMOST DISPLAY
    STA $FA     ; CENTER DISPLAY
    STA $FB     ; LEFTMOST DISPLAY

    

WAIT:           ; WAIT FOR OPERATOR INPUT
    JSR SCANDS  ; SCANDS (UPDATE DISPLAY)
    JSR GETKEY  ; GETKEY (CHECK THE KEYS ON KEYPAD)
    CMP #$02    ; SEE IF THE OPERATOR ENTERED  2
    BEQ RESTART ; IF SO, THEN RESTART
    CMP #$04    ; IF 4, THEN EXIT TO KIM MONITOR
    BNE CONT4   ; CONTINUE


CONT4:
    CMP #$01    ; IF 1, THEN GO TO BEGIN TO START THE TIMER
    BNE WAIT    ; OTHERWISE, WAIT
    JMP BEGIN   ; START THE TIMER
    
BEGIN:
    JSR SCANDS  ; SCANDS (UPDATE DISPLAY)
    LDA DLYTIME ; CALIBRATION FOR TIMER
    STA DLYCNT
    
DELAY: 
    NOP         ; NOP FOR CALIBRATION
    JSR GETKEY  ; GETKEY
    CMP #$03    ; IF 3, THEN ENTER WAIT MODE
    BEQ WAIT 

AFTERKEYCHECK:
    DEC DLYCNT   ; DECREMENT INDEX REGISTER
    LDA DLYCNT
    BNE DELAY   ; CONTINUE UNTIL IT'S TIME TO UPDATE HUNDREDTHS BY 2
    NOP         ; NO OPERATION
    CLC         ; CLEAR THE CARRY FLAG
    CLV         ; CLEAR THE OVERFLOW FLAG
    SED         ; SET THE DECIMAL FLAG
    LDA #5      ; LOAD 2 TO ACCUMULATOR SINCE IT'S TOO SLOW TO INC BY 1
    ADC $F9     ; ADD RIGHTMOST DIGITS TO ACCUMULATOR
    STA $F9     ; STORE THE NEW VALUE TO DISPLAY BUFFER
    CLD         ; NOW, CLEAR THE DECIMAL FLAG

    BCS INCSEC  ; IF CARRY IS SET, THEN IT'S TIME TO INCREMENT SECONDS
    JMP BEGIN   ; THEN GO BACK TO BEGINNING

INCSEC:         ; INCREMENT SECONDS
    CLC         ; CLEAR THE CARRY FLAG
    SED         ; SET THE DECIMAL FLAG
    LDA #01     ; LOAD 1 TO ACCUMULATOR
    ADC $FA     ; THEN ADD TO MIDDLE TWO DIGITS (SECONDS)
    STA $FA     ; STORE VALUE BACK TO DISPLAY BUFFER
    CLD         ; THEN CLEAR DECIMAL FLAG

    BCS INCHUN  ; IF CARRY IS SET, THEN IT'S TIME TO INCREMENT HUNDREDTHS
    JMP BEGIN   ; IF NOT, THEN GO BACK TO BEGIN

INCHUN:
    CLC         ; CLEAR THE CARRY FLAG
    SED         ; SET THE DECIMAL FLAG
    LDA #01     ; LOAD 1 TO ACCUMULATOR
    ADC $FB     ; INCREMENT LEFTMOST DIGITS BY ONE
    STA $FB     ; STORE THIS BACK TO THE DISPLAY BUFFER
    CLD         ; CLEAR THE DECIMAL FLAG
    CLC         ; CLEAR THE CARRY FLAG

    JMP BEGIN   ; GO BACK TO BEGINNING
DLYCNT: DB  09H
    END
